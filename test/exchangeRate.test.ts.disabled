import Big, from "big.js";
import { expect } from "chai";
// import * as fc from "fast-check";

import {
  MonetaryAmount,
} from "../src/monetary";

const newBig = (value: number, decimals: number = 0) =>
  new Big(value).mul(new Big(10).pow(decimals));

describe("MonetaryAmount", () => {
  const rawRate = 9200;
  const USDT = new Tether("0x");
  const normalizedRawRate = newBig(rawRate, USDT.decimals);
  const rate = new ExchangeRate(
    BTC,
    USDT,
    normalizedRawRate
  );

  describe("toBase", () => {
    it("should correctly convert value", () => {
      const btcAmount = rate.toBase(
        new MonetaryAmount(USDT, rawRate * 3, 0)
      );
      expect(btcAmount.toBig(0).eq(new Big(3))).to.be.true;
    });
  });

  describe("toCounter", () => {
    it("should correctly convert value", () => {
      const usdtAmount = rate.toCounter(new BTCAmount(2, 0));
      expect(usdtAmount.toBig(0).eq(new Big(rawRate * 2))).to.be.true;
    });
  });

  describe("format", () => {
    it("should format with the correct number of decimals", () => {
      expect(rate.format(USDT.decimals - 1)).to.eq("92000");
    });

    it("should format with the correct precision", () => {
      expect(rate.format(USDT.decimals + 3, 1)).to.eq("9.2");
    });
  });

  describe("formatHuman", () => {
    it("should format with the correct number of decimals and locale", () => {
      expect(rate.formatHuman()).to.eq("9,200");
    });
  });
});
